import io.sentry.android.gradle.instrumentation.logcat.LogcatLevel

plugins {
    id "io.sentry.android.gradle" version "5.8.0"
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.ydq.android.gradle.native-aar.import'
    id 'jacoco'
    id 'com.mxalbert.gradle.jacoco-android'
}

//fullstory {
//    org 'QNEN8'
//    enabledVariants 'all'
//    logLevel 'off'
//}

android {
    compileSdkVersion 34
    namespace "com.example.vu.android"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.example.vu.android"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode System.getenv('VERSION_CODE')?.toInteger() ?: 241226
        versionName System.getenv('VERSION_NAME') ?: "24.12.26"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                arguments.add(0, "-DANDROID_STL=c++_static")
            }
        }

        ndk {
            abiFilters("x86", "armeabi-v7a", "x86_64", "arm64-v8a")
        }
    }
    externalNativeBuild {
        cmake {
            setPath("CMakeLists.txt")
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig = signingConfigs.debug // to be able to run release mode
            buildConfigField("String", "SE", "\"tda\"")
            buildConfigField("boolean", "SLOW_PROFILING", "true")
        }
        debug {
            buildConfigField("String", "SE", "\"tda\"")
            buildConfigField("boolean", "SLOW_PROFILING", "true")
            testCoverageEnabled true
        }
    }

    buildFeatures {
        dataBinding true
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion "1.5.14"
    }

    lintOptions {
        abortOnError false
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    implementation 'io.sentry:sentry-android:8.17.0' // TODO remove this line when new version of the plugin is out
    // This should be included by default in the Android SDK, but it seems to be a problem with v8+ of the SDK, so we have to manually add it
    implementation 'io.sentry:sentry-native-ndk:0.8.3'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation group: 'androidx.constraintlayout', name: 'constraintlayout', version: '1.1.3'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.navigation:navigation-fragment:2.5.3'
    implementation 'androidx.navigation:navigation-ui:2.5.3'
    implementation 'com.squareup.okhttp3:okhttp:4.9.2'
    implementation 'junit:junit:4.13.2'
    implementation 'com.google.code.gson:gson:2.10.1'
    def fragment_version = "1.5.6"
    // Java language implementation
    implementation "androidx.fragment:fragment:$fragment_version"

    // Warning: upgrading the room version beyond 2.0.0 may
    // cause errors running automated Saucelabs tests that generate data.
    // If you upgrade the room version, ensure you run associated automated
    // tests locally and that they pass.
    def room_version = "2.6.1"

    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    implementation 'io.reactivex.rxjava3:rxjava:3.1.8'
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.2'
    implementation 'androidx.room:room-rxjava3:2.6.1'

    def compose_version = "1.6.3"
    def compose_material3_version = "1.2.1"

    // Compose
    implementation "androidx.activity:activity-compose:1.8.2"
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material3:material3:$compose_material3_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation "io.coil-kt:coil-compose:2.6.0"

    testImplementation 'org.jetbrains:annotations:23.0.0'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit:1.8.0'
    testImplementation 'org.robolectric:robolectric:4.10.3'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:4.1.0'
    testImplementation 'androidx.test:core:1.4.0'
    testImplementation 'androidx.test.ext:junit:1.1.3'
    testImplementation 'androidx.test:runner:1.4.0'

    // JUnit 5 dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

jacoco {
    toolVersion = "0.8.10"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true // is this necessary
    jacoco.excludes = ['jdk.internal.*'] // is this necessary
}

sentry {
    autoUpload = true
    uploadNativeSymbols = true
    includeNativeSources = true
    debug = true
    includeSourceContext = true
    additionalSourceDirsForSourceContext = ["src/main/java"]
    tracingInstrumentation {
        enabled = true
        logcat {
            enabled = true
            minLevel = LogcatLevel.VERBOSE
        }
    }
    // TODO remove this line when new version of the plugin is out
    autoInstallation {
        sentryVersion = "8.17.0"
    }
}
